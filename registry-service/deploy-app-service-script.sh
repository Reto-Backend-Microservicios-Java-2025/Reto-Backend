#!/bin/bash

# Script para el deployment de la aplicaci√≥n con Docker y Azure App Service

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuraci√≥n
RESOURCE_GROUP="registry-rg"
LOCATION="eastus"
ACR_NAME="registryacr$(date +%s)"
APP_PLAN="registry-plan"
WEB_APP="registry-service-app"

echo "üöÄ Iniciando deployment en Azure App Service..."

# 1. VERIFICACIONES DE SEGURIDAD PREVIAS
echo -e "${YELLOW}üîç Verificando configuraci√≥n de Azure...${NC}"

# Verificar si Azure CLI est√° instalado
if ! command -v az &> /dev/null; then
    echo -e "${RED}‚ùå Azure CLI no est√° instalado${NC}"
    echo "Instala Azure CLI: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"
    exit 1
fi

# Verificar si el usuario est√° autenticado
if ! az account show &> /dev/null; then
    echo -e "${RED}‚ùå No est√°s autenticado en Azure${NC}"
    echo "Ejecuta: az login"
    exit 1
fi

# Verificar y registrar proveedores de recursos necesarios
echo -e "${YELLOW}üì¶ Verificando proveedores de recursos...${NC}"

REQUIRED_PROVIDERS=("Microsoft.ContainerRegistry" "Microsoft.Web" "Microsoft.Storage")

for provider in "${REQUIRED_PROVIDERS[@]}"; do
    echo "Verificando $provider..."
    current_state=$(az provider show --namespace $provider --query "registrationState" -o tsv 2>/dev/null)

    if [ "$current_state" != "Registered" ]; then
        echo -e "${YELLOW}üìã Registrando $provider...${NC}"
        az provider register --namespace $provider

        # Esperar hasta que est√© registrado (m√°ximo 2 minutos)
        for i in {1..12}; do
            state=$(az provider show --namespace $provider --query "registrationState" -o tsv)
            if [ "$state" = "Registered" ]; then
                echo -e "${GREEN}‚úÖ $provider registrado exitosamente${NC}"
                break
            elif [ "$i" = "12" ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  $provider a√∫n registr√°ndose, continuando...${NC}"
                break
            else
                echo "Esperando registro de $provider... ($i/12)"
                sleep 10
            fi
        done
    else
        echo -e "${GREEN}‚úÖ $provider ya est√° registrado${NC}"
    fi
done

# Mostrar informaci√≥n de la cuenta actual
echo -e "${GREEN}‚úÖ Autenticado en Azure${NC}"
CURRENT_USER=$(az account show --query "user.name" -o tsv)
CURRENT_SUBSCRIPTION=$(az account show --query "name" -o tsv)
SUBSCRIPTION_ID=$(az account show --query "id" -o tsv)

echo "üë§ Usuario actual: $CURRENT_USER"
echo "üìã Suscripci√≥n actual: $CURRENT_SUBSCRIPTION"
echo "üÜî ID de suscripci√≥n: $SUBSCRIPTION_ID"

# Confirmaci√≥n del usuario
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  ¬øEst√°s seguro de que quieres crear recursos en esta suscripci√≥n?${NC}"
echo "Se crear√°n los siguientes recursos:"
echo "  - Resource Group: $RESOURCE_GROUP"
echo "  - Container Registry: $ACR_NAME"
echo "  - App Service Plan: $APP_PLAN"
echo "  - Web App: $WEB_APP"
echo "  - Ubicaci√≥n: $LOCATION"
echo ""
read -p "¬øContinuar? (s/N): " -n 1 -r
echo ""

if [[ ! $REPLY =~ ^[SsYy]$ ]]; then
    echo "‚ùå Deployment cancelado por el usuario"
    exit 1
fi

# 2. Verificar si Docker est√° ejecut√°ndose
echo -e "${YELLOW}üê≥ Verificando Docker...${NC}"
if ! docker info &> /dev/null; then
    echo -e "${RED}‚ùå Docker no est√° ejecut√°ndose${NC}"
    echo "Inicia Docker Desktop o el servicio de Docker"
    exit 1
fi
echo -e "${GREEN}‚úÖ Docker est√° ejecut√°ndose${NC}"

# 3. Compilar la aplicaci√≥n
echo -e "${YELLOW}üî® Compilando aplicaci√≥n...${NC}"
mvn clean package -DskipTests

if [ ! -f "target/registry-service-0.0.1-SNAPSHOT.jar" ]; then
    echo -e "${RED}‚ùå Error: No se encontr√≥ el JAR compilado${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Aplicaci√≥n compilada exitosamente${NC}"

# 4. Construir imagen Docker
echo -e "${YELLOW}üê≥ Construyendo imagen Docker...${NC}"
docker build -t registry-service:latest .
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Error construyendo imagen Docker${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Imagen Docker construida${NC}"

# 5. Crear resource group
echo -e "${YELLOW}üìÅ Creando resource group...${NC}"
az group create --name $RESOURCE_GROUP --location $LOCATION
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Error creando resource group${NC}"
    exit 1
fi

# 6. Crear Azure Container Registry con admin habilitado
echo -e "${YELLOW}üì¶ Creando Azure Container Registry con admin habilitado...${NC}"
az acr create \
  --resource-group $RESOURCE_GROUP \
  --name $ACR_NAME \
  --sku Basic \
  --admin-enabled true
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Error creando ACR${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ ACR creado con usuario administrador habilitado${NC}"

# 7. Hacer login al ACR
echo -e "${YELLOW}üîê Autenticando con ACR...${NC}"
az acr login --name $ACR_NAME
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Error autenticando con ACR${NC}"
    exit 1
fi

# 8. Obtener servidor ACR
ACR_SERVER=$(az acr show --name $ACR_NAME --resource-group $RESOURCE_GROUP --query "loginServer" -o tsv)
echo "üìã ACR Server: $ACR_SERVER"

# 9. Subir imagen al ACR
echo -e "${YELLOW}üì§ Subiendo imagen a ACR...${NC}"
docker tag registry-service:latest $ACR_SERVER/registry-service:latest
docker push $ACR_SERVER/registry-service:latest
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Error subiendo imagen a ACR${NC}"
    exit 1
fi

# 10. Crear App Service Plan
echo -e "${YELLOW}üìã Creando App Service Plan...${NC}"
az appservice plan create \
  --name $APP_PLAN \
  --resource-group $RESOURCE_GROUP \
  --sku B1 \
  --is-linux

# 11. Crear Web App
echo -e "${YELLOW}üåê Creando Web App...${NC}"
az webapp create \
  --resource-group $RESOURCE_GROUP \
  --plan $APP_PLAN \
  --name $WEB_APP \
  --deployment-container-image-name $ACR_SERVER/registry-service:latest

# 12. Configurar puerto
echo -e "${YELLOW}‚öôÔ∏è  Configurando puerto...${NC}"
az webapp config appsettings set \
  --resource-group $RESOURCE_GROUP \
  --name $WEB_APP \
  --settings WEBSITES_PORT=8090

# 13. Configurar ACR credentials
echo -e "${YELLOW}üîë Configurando credenciales ACR...${NC}"

# Verificar que el admin est√° habilitado y obtener credenciales
ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query "username" -o tsv 2>/dev/null)
ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query "passwords[0].value" -o tsv 2>/dev/null)

if [ -z "$ACR_USERNAME" ] || [ -z "$ACR_PASSWORD" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Habilitando admin en ACR y obteniendo credenciales...${NC}"
    az acr update -n $ACR_NAME --admin-enabled true
    ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query "username" -o tsv)
    ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query "passwords[0].value" -o tsv)
fi

if [ -z "$ACR_USERNAME" ] || [ -z "$ACR_PASSWORD" ]; then
    echo -e "${RED}‚ùå Error obteniendo credenciales ACR${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Credenciales ACR obtenidas${NC}"
echo "   Usuario: $ACR_USERNAME"

# Configurar contenedor con credenciales
az webapp config container set \
  --name $WEB_APP \
  --resource-group $RESOURCE_GROUP \
  --docker-custom-image-name $ACR_SERVER/registry-service:latest \
  --docker-registry-server-url https://$ACR_SERVER \
  --docker-registry-server-user $ACR_USERNAME \
  --docker-registry-server-password $ACR_PASSWORD

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Error configurando credenciales del contenedor${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Credenciales del contenedor configuradas${NC}"

# 14. Configurar variables de entorno adicionales
echo -e "${YELLOW}üîß Configurando variables de entorno...${NC}"
az webapp config appsettings set \
  --resource-group $RESOURCE_GROUP \
  --name $WEB_APP \
  --settings \
    WEBSITES_PORT=8090 \
    JAVA_OPTS="-Xmx512m -Xms256m" \
    SPRING_PROFILES_ACTIVE=prod \
    WEBSITES_ENABLE_APP_SERVICE_STORAGE=false

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Error configurando variables de entorno${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Variables de entorno configuradas${NC}"

# 14.1. Habilitar logging para diagn√≥stico
echo -e "${YELLOW}üìù Habilitando logging del contenedor...${NC}"
az webapp log config \
  --resource-group $RESOURCE_GROUP \
  --name $WEB_APP \
  --docker-container-logging filesystem

# 14.2. Reiniciar aplicaci√≥n para aplicar cambios
echo -e "${YELLOW}üîÑ Reiniciando aplicaci√≥n para aplicar configuraci√≥n...${NC}"
az webapp restart --name $WEB_APP --resource-group $RESOURCE_GROUP

# 15. Obtener URL de la aplicaci√≥n
APP_URL=$(az webapp show --name $WEB_APP --resource-group $RESOURCE_GROUP --query "defaultHostName" -o tsv)

echo ""
echo -e "${GREEN}üéâ ¬°Deployment completado exitosamente!${NC}"
echo -e "${GREEN}üìã Informaci√≥n del deployment:${NC}"
echo "   Resource Group: $RESOURCE_GROUP"
echo "   ACR Name: $ACR_NAME"
echo "   Web App Name: $WEB_APP"
echo "   URL: https://$APP_URL"
echo "   Eureka Dashboard: https://$APP_URL"
echo ""
echo -e "${YELLOW}üìù Comandos √∫tiles:${NC}"
echo "   Ver logs: az webapp log tail --name $WEB_APP --resource-group $RESOURCE_GROUP"
echo "   Reiniciar: az webapp restart --name $WEB_APP --resource-group $RESOURCE_GROUP"
echo "   Ver configuraci√≥n: az webapp config show --name $WEB_APP --resource-group $RESOURCE_GROUP"
echo "   Eliminar recursos: az group delete --name $RESOURCE_GROUP --yes --no-wait"

# 16. Esperar y verificar con diagn√≥stico mejorado
echo -e "${YELLOW}‚è≥ Esperando que la aplicaci√≥n inicie...${NC}"
sleep 45

echo -e "${YELLOW}üîç Verificando estado de la aplicaci√≥n...${NC}"

# Verificar estado de la Web App
APP_STATE=$(az webapp show --name $WEB_APP --resource-group $RESOURCE_GROUP --query "state" -o tsv)
echo "Estado de la aplicaci√≥n: $APP_STATE"

# Verificar conectividad con m√∫ltiples intentos
for attempt in {1..3}; do
    echo "Intento de verificaci√≥n $attempt/3..."

    # Probar endpoint de salud
    HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://$APP_URL/actuator/health 2>/dev/null || echo "000")

    if [ "$HTTP_STATUS" = "200" ]; then
        echo -e "${GREEN}‚úÖ ¬°Aplicaci√≥n funcionando correctamente!${NC}"
        echo -e "${GREEN}üéØ Eureka Server disponible en: https://$APP_URL${NC}"
        break
    elif [ "$HTTP_STATUS" = "404" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Endpoint /actuator/health no encontrado, probando endpoint ra√≠z...${NC}"
        ROOT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://$APP_URL 2>/dev/null || echo "000")
        if [ "$ROOT_STATUS" = "200" ]; then
            echo -e "${GREEN}‚úÖ Aplicaci√≥n funcionando (disponible en endpoint ra√≠z)${NC}"
            echo -e "${GREEN}üéØ Eureka Server disponible en: https://$APP_URL${NC}"
            break
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Estado ra√≠z: $ROOT_STATUS${NC}"
        fi
    else
        echo -e "${YELLOW}‚è≥ Estado HTTP: $HTTP_STATUS - La aplicaci√≥n a√∫n se est√° iniciando...${NC}"

        if [ $attempt -lt 3 ]; then
            echo "Esperando 30 segundos antes del siguiente intento..."
            sleep 30
        fi
    fi
done

if [ "$HTTP_STATUS" != "200" ] && [ "$ROOT_STATUS" != "200" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  La aplicaci√≥n a√∫n se est√° iniciando${NC}"
    echo -e "${BLUE}üìã Para diagnosticar:${NC}"
    echo "   1. Visita: https://$APP_URL"
    echo "   2. Ver logs: az webapp log tail --name $WEB_APP --resource-group $RESOURCE_GROUP"
    echo "   3. Estado del contenedor: az webapp show --name $WEB_APP --resource-group $RESOURCE_GROUP --query 'state'"
    echo "   4. Configuraci√≥n: az webapp config container show --name $WEB_APP --resource-group $RESOURCE_GROUP"
    echo ""
    echo -e "${YELLOW}üí° Nota: Las aplicaciones Java pueden tardar 2-5 minutos en iniciar completamente${NC}"
fi